package polymorphism;

import java.util.ArrayList;

class Animal {
	public void move() {
		System.out.println("동물들이 움직입니다.");
	}
}

class Human extends Animal {
	public void move() {
		System.out.println("사람이 두 발로 걷습니다.");
	}
	
	public void readBook() {
		System.out.println("사람이 책을 읽습니다.");
	}
}

class Tiger extends Animal {
	public void move() {
		System.out.println("호랑이가 네 발로 걷습니다.");
	}
	
	public void hunting() {
		System.out.println("호랑이가 사냥을 합니다.");
	}
}

class Eagle extends Animal {
	public void move() {
		System.out.println("독수리가 하늘을 납니다.");
	}
	
	public void flying() {
		System.out.println("독수리가 날개를 쭉 폅니다.");
	}
}

public class AnimalTest {
	// 자료형이 Animal형인 ArrayList생성
	ArrayList<Animal> aniList = new ArrayList<Animal>();
	
	public static void main(String[] args) {
		AnimalTest aTest = new AnimalTest();

		// 자동 업캐스팅
		aTest.addAnimal();
		
		System.out.println("=== 원래 형으로 다운 캐스팅 ===");
		
	}
	
	public void addAnimal() {
		// ArrayList에 저장되면서 Animal형으로 형변환
		aniList.add(new Human());
		aniList.add(new Tiger());
		aniList.add(new Eagle());
		
		for (Animal animal : aniList) {
			animal.move();
		}
	}
	

	// 매개변수로 animal형(상위클래스)을 전부 받는다
	public void moveAnimal(Animal animal) {
		// 재정의된 메서드가 호출된다.
		// 가상메서드 원리에 따라 상위 클래스의 move 가 아닌 매개변수의 인스턴스의 move가 재정의되어 호출된다.
		animal.move();
	}
}
